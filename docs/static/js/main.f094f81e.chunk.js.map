{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGif.js","App.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","id","placeholder","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGif","App","categories","root","document","querySelector","ReactDOM","render"],"mappings":"iNAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EACRC,mBAAS,IADD,mBACrCC,EADqC,KACzBC,EADyB,KAa5C,OACI,uBAAMC,SATgB,SAACC,GACvBA,EAAEC,iBACCJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACvCN,EAAc,MAKlB,UACI,8CACA,uBAAOO,KAAK,OACZC,GAAG,SACHC,YAAY,8BACZC,MAAOX,EACPY,SAlBe,SAACT,GACpBF,EAAcE,EAAEU,OAAOF,c,+BCNlBG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACbC,EADa,mGACsFC,UAAUH,IADhG,SAEAI,MAAMF,GAFN,cAEbG,EAFa,gBAGEA,EAAKC,OAHP,uBAGZC,EAHY,EAGZA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHhB,GAAIgB,EAAIhB,GACRiB,MAAQD,EAAIC,MACZT,IAAKQ,EAAIE,OAAOC,iBAAiBX,QARtB,kBAWZM,GAXY,4CAAH,sDCEPM,EAAc,SAACJ,GAExB,OACI,sBAAKK,UAAU,yCAAf,UACI,qBAAKC,IAAKN,EAAIR,IAAKe,IAAKP,EAAIC,QAC5B,4BAAID,EAAIC,YCAPO,EAAW,SAAC,GAAgB,IAAflB,EAAc,EAAdA,SAAc,ECJb,SAACA,GAAc,IAAD,EACXhB,mBAAS,CAC/BuB,KAAO,GACPY,SAAS,IAHwB,mBAC9BC,EAD8B,KACvBC,EADuB,KAerC,OATAC,qBAAU,WACNvB,EAAQC,GAAUuB,MAAM,SAAAC,GACpBC,YAAW,WACPJ,EAAS,CAACd,KAAMiB,EAAKL,SAAS,MAC/B,UAER,CAACnB,IAGGoB,EDRiBM,CAAY1B,GAA7BO,EAH6B,EAG7BA,KAAMY,EAHuB,EAGvBA,QAIb,OACI,qCACA,oBAAKJ,UAAU,oCAAf,SAAoDf,IAClDmB,GAAW,mBAAIJ,UAAU,oCAAd,sBACb,qBAAKA,UAAU,YAAf,SAGQR,EAAKE,KAAK,SAAAC,GAAG,OACL,cAAC,EAAD,eAA+BA,GAAZA,EAAIhB,aEahCiC,EA5BH,WAAO,IAAD,EACoB3C,mBAAS,CAAC,cAD9B,mBACT4C,EADS,KACG7C,EADH,KAOd,OACI,qCACI,gDACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAGA,6BAEQ6C,EAAWnB,KAAI,SAAAT,GAAQ,OAClB,cAAC,EAAD,CAEOA,SAAUA,GADLA,YClB/B6B,EAAOC,SAASC,cAAc,SACpCC,IAASC,OACL,cAAC,EAAD,IACAJ,K","file":"static/js/main.f094f81e.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n    const handleInputAdd = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n    const handleInputSubmit = (e) => {\r\n        e.preventDefault();\r\n        if(inputValue.trim().length > 2 ){\r\n            setCategories(cats => [ inputValue, ...cats]);\r\n            setInputValue('');\r\n        }\r\n        \r\n    }\r\n    return (\r\n        <form onSubmit={handleInputSubmit}>\r\n            <h2>Add Category</h2>\r\n            <input type=\"text\" \r\n            id=\"nombre\" \r\n            placeholder=\"Ingrese una opción nueva\"\r\n            value={inputValue}\r\n            onChange={handleInputAdd}></input>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired,\r\n}\r\n","export const getGifs = async (category) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?api_key=pQwaCsSbBjJTmxnTljV8RmdBSu4jo3bL&limit=10&q=${ encodeURI(category)}`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title : img.title,\r\n            url: img.images.downsized_medium.url,\r\n        }\r\n    });\r\n    return gifs;\r\n\r\n}","import React, {useState} from 'react'\r\n\r\nexport const GifGridItem = (img) => {\r\n    //  console.log(img);\r\n    return (\r\n        <div className=\"card animate__animated animate__fadeIn\">\r\n            <img src={img.url} alt={img.title}></img>\r\n            <p>{img.title}</p>\r\n        </div>\r\n    );\r\n}\r\n","//coleccion de elementos que coinciden con categories\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { useFetchGif } from '../hooks/useFetchGif';\r\nimport {GifGridItem} from './GifGridItem';\r\n\r\n\r\nexport const GifGrid =  ({category}) => {\r\n\r\n    // const [count, setCount] = useState(0);\r\n    const {data, loading} = useFetchGif(category);\r\n    \r\n    \r\n    // getGifs();\r\n    return (\r\n        <>\r\n        <h3  className=\"animate__animated animate__fadeIn\">{category}</h3>   \r\n        { loading && <p  className=\" animate__animated animate__flash\">Cargando</p> }\r\n        <div className=\"card-grid\">\r\n                         \r\n            {\r\n                data.map( img =>(\r\n                        <GifGridItem key= {img.id} {...img}/>\r\n                ))\r\n            }\r\n        </div>\r\n\r\n        </>\r\n    )\r\n    \r\n\r\n    \r\n  \r\n}\r\n","import {useState, useEffect}  from 'react';\r\nimport {getGifs} from '../helpers/getGifs';\r\n\r\nexport const useFetchGif = (category) => {\r\n    const [state, setState] = useState({\r\n        data : [],\r\n        loading: true\r\n    })\r\n\r\n    useEffect(() => {\r\n        getGifs(category).then( imgs => {\r\n            setTimeout(() =>{\r\n                setState({data: imgs,loading: false}) \r\n            }, 3000);            \r\n        })\r\n    }, [category])\r\n  \r\n\r\n    return state;\r\n};","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\n// agregar nueva categoría\r\n\r\nconst App = () => {\r\n    let [categories, setCategories] = useState(['One punch']);\r\n    // const handleAdd = () => {\r\n    //     setCategories(cats => [...cats, 'Haikyuu!!']);\r\n    // }\r\n\r\n\r\n    return (\r\n        <>\r\n            <h2>Gif Expert App</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr></hr>\r\n\r\n\r\n            <ol>\r\n                {\r\n                    categories.map(category =>\r\n                        (<GifGrid\r\n                                key={category} \r\n                                category={category}\r\n                            />)\r\n                    )\r\n                }\r\n            </ol>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n// import reportWebVitals from './reportWebVitals';\n\nconst root = document.querySelector('#root');\nReactDOM.render(\n    <App />,\n    root\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}